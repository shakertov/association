# Generated by Django 3.2 on 2023-06-27 09:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Введите ваш Email. Он будет использован как логин для входа.', max_length=255, unique=True, verbose_name='Email')),
                ('role', models.CharField(choices=[('expert', 'expert'), ('admin', 'admin')], default='expert', max_length=20, verbose_name='Роль пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(help_text='Введите название города, в котором имеются Ваши представители', max_length=100, verbose_name='Название города')),
            ],
            options={
                'ordering': ['city'],
            },
        ),
        migrations.CreateModel(
            name='RequestUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите ваше имя', max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите вашу фамилию', max_length=100, verbose_name='Фамилия')),
                ('middle_name', models.CharField(help_text='Введите ваше отчество', max_length=100, verbose_name='Отчество')),
                ('phone', models.CharField(help_text='Введите ваш номер телефона', max_length=20, verbose_name='Номер телефона')),
                ('email', models.EmailField(help_text='Введите ваш Email. Необходимо указывать тот, который будет использован при регистрации.', max_length=100, verbose_name='Email')),
                ('city', models.CharField(help_text='Введите город, в котором хотите стать нашим представителем', max_length=100, verbose_name='Город')),
                ('skill', models.CharField(help_text='Введите через знак - ; - ваши навыки. Например - психология; эзотерика; и т.д.', max_length=255, verbose_name='Область специализации')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.CharField(help_text='Введите название специализации', max_length=100, verbose_name='Область специализации')),
            ],
            options={
                'ordering': ['skill'],
            },
        ),
        migrations.CreateModel(
            name='ExtraFieldsExpert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите ваше имя', max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите вашу фамилию', max_length=100, verbose_name='Фамилия')),
                ('middle_name', models.CharField(help_text='Введите ваше отчество', max_length=100, verbose_name='Отчество')),
                ('phone', models.CharField(help_text='Введите ваш номер телефона', max_length=20, verbose_name='Номер телефона')),
                ('about', models.TextField(help_text='Расскажите о себе', verbose_name='Обо мне')),
                ('expert', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=32)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invite', to='users.requestuser')),
            ],
            options={
                'unique_together': {('request', 'link')},
            },
        ),
    ]
